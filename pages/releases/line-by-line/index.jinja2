{% extends '../../common/jinja/layouts/base.jinja2' %}

{% block head %}
  <meta name="description"
        content="Слушайте бесплатно альбом &quot;построчно&quot; анти-музыкального анти-коллектива &quot;потерпевшие&quot;. Альбом доступен на всех площадках.">
  <meta property="og:title" content="потерпевшие - построчно">
  <meta property="og:description" content="слушать без смс и регистрации">
  <meta property="og:image" content="https://terpevshie.ru/releases/line-by-line/cover.webp">
  <meta property="og:url" content="https://terpevshie.ru/releases/line-by-line">
  <meta property="og:type" content="website">
  {% include '../../common/jinja/includes/font_old_standard.html' %}
  {% include '../../common/jinja/includes/favicon_tags.html' %}
{% endblock %}

{# Components #}
{% import '../../common/jinja/components/navbar.jinja2' as navbar %}

{% block content %}
  {{ navbar.html() }}
  {#  <div id="album-container">#}
  {#    <img#}
  {#      fetchpriority="high"#}
  {#      id="album-img"#}
  {#      class="hover-scale"#}
  {#      src="cover.webp"#}
  {#      alt="обложка альбома"#}
  {#      onerror="this.alt='не удалось загрузить изображение...';"#}
  {#    >#}
  {#  </div>#}
{% endblock %}

{% block script %}
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.0/p5.min.js"></script>
  <script>
    let img;
    let glitchTime = 0;
    let nextGlitch = 0;

    const coverRoundingInPx = 10

    function createRoundedMask(w, h, r) {
      let mask = createGraphics(w, h);
      mask.noStroke();
      mask.fill(255);
      mask.rect(0, 0, w, h, r);
      return mask;
    }

    function preload() {
      let roundedMask;
      img = loadImage("cover.webp", () => {
        roundedMask = createRoundedMask(img.width, img.height, coverRoundingInPx);
        img = img.get();
        img.mask(roundedMask);
      });
    }

    function planNextGlitch() {
      nextGlitch = millis() + random(1000, 10000)
    }

    function setup() {
      createCanvas(windowWidth, windowHeight);
      imageMode(CENTER);
      noSmooth();
      planNextGlitch();
    }

    // todo пусть иногда то увеличивается, то уменьшается
    const deformFactor = 3

    function drawCover() {
      const imgAspect = img.width / img.height;
      const maxW = Math.min(img.width, width * 0.8);
      const maxH = Math.min(img.height, height * 0.8);
      let w, h;
      if (maxW / maxH > imgAspect) {
        h = maxH;
        w = h * imgAspect;
      } else {
        w = maxW;
        h = w / imgAspect;
      }

      let cx = width / 2;
      let cy = height / 2;

      let yStep = 2;
      for (let y = 0; y < h; y += yStep) {
        let offset = (noise(y * 0.02, millis() * 0.0005) - 0.5) * deformFactor;
        image(
          img,
          cx + offset,
          cy - h / 2 + y,
          w,
          yStep,
          0,
          (y / h) * img.height,
          img.width,
          (yStep / h) * img.height
        );
      }
    }

    function glitch() {
      let w = 500;
      let h = 500;
      let cx = width / 2;
      let cy = height / 2;

      push();
      imageMode(CORNER);
      translate(cx - w / 2, cy - h / 2);
      tint(255, random(50, 255)); // прозрачность глитча

      const count = random(5, 40)
      for (let i = 0; i < count; i++) {
        let sx = random(img.width + 500);
        let sy = random(img.height + 200);
        let sw = random(10, 50);
        let sh = random(5, 20);

        let dx = sx + random(-5, 5);
        let dy = sy + random(-5, 5);

        image(img, dx, dy, sw, sh, sx, sy, sw, sh);
      }

      pop();
      noTint();
    }

    function draw() {
      // todo пусть глитч иногда остается на какое-то время
      {#if (Math.random() < 0.01) {#}
      {#  background(0);#}
      {# }#}
      background(0);

      // Проверка глитча
      let isGlitching = millis() < glitchTime;

      drawCover()

      if (isGlitching) {
        glitch();
      }

      // Запускаем новый глитч, если пора
      if (millis() > nextGlitch) {
        glitchTime = millis() + random(300, 800); // длительность глитча
        planNextGlitch();
      }
    }

    function windowResized() {
      resizeCanvas(windowWidth, windowHeight);
    }
  </script>
{% endblock %}

{% block style %}
  <link rel="stylesheet" href="/common/css/minireset.css">
  <style>
    {% include '../../common/jinja/includes/view_transition.css' %}

    .font-regular {
      font-family: "Old Standard TT", serif;
      font-weight: 400;
      font-style: normal;
    }

    {{ navbar.styles() }}

    body {
      margin: 0;
    {#background: #221a15;#} background: #000;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      overflow: hidden;
    }

    #album-container {
      position: relative;
      width: 500px;
      height: 500px;
      z-index: 2;
    }

    #album-img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      user-select: none;
      pointer-events: none;
    }

    canvas {
      position: absolute;
      top: 0;
      left: 0;
      z-index: 1;
      pointer-events: none;
    }
  </style>
{% endblock %}